ðŸš€ Day 77 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 104. Maximum Depth of Binary Tree
ðŸ”— Problem Link: https://lnkd.in/duXuu9ht

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    // The main method to find the maximum depth of a binary tree
    int maxDepth(TreeNode* root) {
        // If the current node is nullptr (empty), the depth is 0
        if (root == nullptr) {
            return 0;
        }
        
        // Recursive call to find the maximum depth of the left subtree
        int left_side = maxDepth(root->left);
        
        // Recursive call to find the maximum depth of the right subtree
        int right_side = maxDepth(root->right);
        
        // The maximum depth is the maximum of the depths of the left and right subtrees plus 1 (for the current node)
        return max(left_side, right_side) + 1;
    }
};

Time Complexity: The time complexity of this algorithm is O(N), where N is the number of nodes in the binary tree. Each node is visited once, and constant time operations are performed for each node.
