ðŸš€ Day 84 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: BFS of graph
ðŸ”— Problem Link: https://lnkd.in/dFmuttzd

class Solution {
public:
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        // Array to keep track of visited nodes, initialized to 0
        int visited[V] = {0};
        
        // Mark the starting node (0) as visited
        visited[0] = 1;
        
        // Create a queue for BFS
        queue<int> q;
        
        // Enqueue the starting node (0)
        q.push(0);
        
        // Vector to store the BFS traversal result
        vector<int> ans;

        // Iterate until the queue is empty
        while (!q.empty()) {
            // Get the front element of the queue (topmost element)
            int node = q.front();

            // Dequeue the front element
            q.pop();

            // Add the current node to the BFS result
            ans.push_back(node);

            // Traverse neighbors of the current node
            for (int i = 0; i < adj[node].size(); i++) {
                // Get the neighbor
                int p = adj[node][i];

                // If the neighbor has not been visited
                if (visited[p] == 0) {
                    // Mark it as visited
                    visited[p] = 1;

                    // Enqueue the neighbor for further exploration
                    q.push(p);
                }
            }
        }

        // Return the BFS traversal result
        return ans;
    }
};

Time Complexity: The time complexity of the BFS traversal in an adjacency list representation is [O(V) + O(2E)] = O(V + E), where V is the number of vertices and E is the number of edges in the graph.

