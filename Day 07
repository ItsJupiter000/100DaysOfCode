ðŸš€ Day 7 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 204. Count Primes (Medium)
ðŸ”— Problem Link: https://lnkd.in/geMmg8XM

class Solution {
public:
    int countPrimes(int n) {
        // If n is less than or equal to 2, there are no prime numbers.
        if (n <= 2) return 0; 

        // Create a boolean vector to track whether numbers are prime.
        vector<bool> isPrime(n, true);

        // 0 and 1 are not prime, so mark them as false.
        isPrime[0] = false;
        isPrime[1] = false;       

        // Loop through numbers from 2 up to the square root of n.
        for (int i = 2; i * i < n; i++) {
            if (isPrime[i]) { // If i is marked as prime...
                // Mark all multiples of i as not prime.
                for (int j = i * i; j < n; j += i) {
                    isPrime[j] = false;
                }
            }
        }           

        // Count the prime numbers.
        int count = 0;
        for (int i = 2; i < n; i++) {
            if (isPrime[i]) {
                count++;
            }
        }        

        // Return the count of prime numbers.
        return count;
    }
};

The time complexity of this code is O(n*log(log(n))) because the inner loop runs fewer times than n and is approximately proportional to n divided by the logarithm of n. This is due to the Sieve of Eratosthenes algorithm's complexity.
