ðŸš€ Day 71 of hashtag#100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 222. Count Complete Tree Nodes
ðŸ”— Problem Link: https://lnkd.in/diQq_ncW

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Function to count nodes in a binary tree
    int countNodes(TreeNode* root) {
        // Check if the root is null (empty tree)
        if (root == nullptr) {
            return 0;  // If the tree is empty, return 0 nodes
        }
        
        // Recursive call to count nodes in the left and right subtrees,
        // plus 1 for the current node
        int res = (countNodes(root->right) + countNodes(root->left) + 1);
        
        return res;  // Return the total count of nodes in the tree
    }
};

The time complexity of this code is O(n), where n is the number of nodes in the binary tree.
