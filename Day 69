ðŸš€ Day 69 of hashtag#100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 1823. Find the Winner of the Circular Game
ðŸ”— Problem Link: https://lnkd.in/dj5bJvdy

class Solution {
public:
    // Recursive function to find the winner's position
    int Find(int n, int k){
        if(n == 1){
            return 0; // If there is only one person, they are the winner, and their position is 0.
        }
        // The winner's position in a smaller group is found recursively, and then k is added and taken modulo n.
        return (Find(n-1, k ) + k) % n;
    } 

    // Main function to find the winner given the total number of people (n) and the step size (k)
    int findTheWinner(int n, int k) {
        int res = Find(n, k) + 1; // Add 1 to the result since positions are 0-indexed.
        return res; // Return the final position of the winner.
    }
};


Time Complexity: O(n), where n is the total number of people. The function makes recursive calls for each person, and each call takes constant time.

-----------------------------------------------------------------------------------------------------------------------------------------------------------


#include <queue>

class Solution {
public:
    // Main function to find the winner given the total number of people (n) and the step size (k)
    int findTheWinner(int n, int k) {
        std::queue<int> q;

        // Initialize the queue with numbers from 1 to n (representing people)
        for (int i = 1; i <= n; i++) {
            q.push(i);
        }

        // Continue the elimination process until there is only one person left in the queue
        while (q.size() > 1) {
            int i = 1;

            // Rotate the queue (eliminating people) until reaching the k-th person
            while (i < k) {
                int e = q.front();  // Get the front person in the queue
                q.pop();           // Remove the front person from the queue
                q.push(e);         // Re-add the front person to the back of the queue
                i++;               // Increment the counter
            }

            q.pop();  // Remove the k-th person from the queue
        }

        return q.front();  // Return the position of the last person remaining in the queue
    }
};

Time Complexity: O(n * k), where n is the total number of people and k is the step size. The function involves rotating the queue (pop and push) in each iteration of the outer loop, and this operation takes O(k) time. The outer loop runs for n-1 iterations, resulting in a total time complexity of O(n * k).
