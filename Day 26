ðŸš€ Day 26 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 704. Binary Search
ðŸ”— Problem Link: https://lnkd.in/ddAbu5Ba

class Solution {
public:
    int search(vector<int>& nums, int target) {
        // Get the size of the array
        int n = nums.size();

        // Initialize low, high, and mid for binary search
        int low = 0;
        int high = n - 1;
        int mid = low + (high - low) / 2;

        // Binary search loop
        while (low <= high) {
            // Check if the middle element is the target
            if (nums[mid] == target) {
                return mid; // Return the index if found
            } else if (nums[mid] < target) {
                // If the target is greater, search in the right half
                low = mid + 1;
            } else {
                // If the target is smaller, search in the left half
                high = mid - 1;
            }

            // Recalculate mid for the next iteration
            mid = low + (high - low) / 2;
        }

        // If the target is not found, return -1
        return -1;
    }
};

 Time complexity, the time complexity of this binary search is O(log n), where n is the number of elements in the array. This is because the search space is halved in each iteration of the loop.
