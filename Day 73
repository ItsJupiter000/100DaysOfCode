ðŸš€ Day 73 of hashtag#100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 144. Binary Tree Preorder Traversal
ðŸ”— Problem Link: https://lnkd.in/dR73WnPi

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<int> ans;  // Global vector to store the result

    // Function to perform preorder traversal on a binary tree
    vector<int> preorderTraversal(TreeNode* root) {
        // Base case: If the current node is null, return the result vector
        if(root == nullptr){
            return ans;
        }
        
        // Process the current node (add its value to the result vector)
        ans.push_back(root->val);

        // Recursive call on the left subtree
        preorderTraversal(root->left);

        // Recursive call on the right subtree
        preorderTraversal(root->right);

        // Return the final result vector
        return ans;
    }
};

Time Complexity: O(N), where N is the number of nodes in the binary tree. Each node is visited exactly once during the traversal.
