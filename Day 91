ðŸš€ Day 91 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Floyd Warshall Algorithm
ðŸ”— Problem Link: https://lnkd.in/ddMe_9-B

int floydWarshall(int n, int m, int src, int dest, vector<vector<int>> &edges) {
    // Initialize distance array with a large value (representing infinity)
    vector<int> dist(n + 1, 1e9);

    // Set the distance from the source node to itself as 0
    dist[src] = 0;

    // Iterate for (n-1) times to relax edges and find the shortest paths
    for (int i = 1; i < n; i++) {
        // Iterate through all edges
        for (int j = 0; j < m; j++) {
            // Extract edge information
            int u = edges[j][0];
            int v = edges[j][1];
            int w = edges[j][2];

            // Check if there is a shorter path from source to v through u
            if (dist[u] != 1e9 && dist[u] + w < dist[v]) {
                // Update the distance to v
                dist[v] = dist[u] + w;
            }
        }
    }

    // The final shortest distance from source to destination
    return dist[dest];
}


Time Complexity:
The time complexity of the Floyd-Warshall algorithm is O(n^3), where n is the number of nodes. The two nested loops iterate over all nodes and edges in the graph, making the algorithm cubic in terms of the number of nodes.
