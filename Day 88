ðŸš€ Day 88 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 617. Merge Two Binary Trees
ðŸ”— Problem Link: https://lnkd.in/dYF2U8ZR

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Function to merge two binary trees
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        // If either tree is empty, return the other one
        if(root1 == nullptr){
            return root2;
        }
        if(root2 == nullptr){
            return root1;
        }
        // If both nodes are null, return null
        if((root1 && root2) == NULL ) {
            return NULL;
        }

        // Create a new node with the sum of values from both trees
        TreeNode *temp = new TreeNode(root1->val + root2->val);
        
        // Recursively merge the left subtrees
        temp->left = mergeTrees(root1->left, root2->left);
        
        // Recursively merge the right subtrees
        temp->right = mergeTrees(root1->right, root2->right);
        
        // Return the merged tree
        return temp;
    }
};



Time Complexity: The time complexity is O(n), where n is the total number of nodes in the smaller of the two input trees. Each node is visited once.
