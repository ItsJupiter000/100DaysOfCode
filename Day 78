ðŸš€ Day 78 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 110. Balanced Binary Tree
ðŸ”— Problem Link: https://lnkd.in/dkfkCBJB

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if (root == nullptr) {
            return true;
        }
        int leftHeight = getHeight(root->left);
        int rightHeight = getHeight(root->right);

        if (abs(leftHeight - rightHeight) > 1) {
            return false;
        }
        if (!isBalanced(root->left) || !isBalanced(root->right)) {
            return false;
        }
        return true;
    }

    int getHeight(TreeNode* node) {
        if (node == nullptr) {
            return 0;
        }
        int leftHeight = getHeight(node->left);
        int rightHeight = getHeight(node->right);
        return 1 + max(leftHeight, rightHeight);
    }
};


The time complexity of the isBalanced function in the provided code is O(n log n), where "n" is the number of nodes in the binary tree.
