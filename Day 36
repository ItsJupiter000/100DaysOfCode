ðŸš€ Day 36 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 141. Linked List Cycle
ðŸ”— Problem Link: https://lnkd.in/ddURSkyw

class Solution {
public:
    ListNode *floyedcycledetection(ListNode* head) {
        // Check if the list is empty
        if (head == NULL)
            return NULL;

        // Initialize slow and fast pointers to the head of the list
        ListNode *slow = head;
        ListNode *fast = head;

        // Iterate through the list using slow and fast pointers
        while (slow != NULL && fast != NULL) {
            // Move slow pointer one step
            slow = slow->next;

            // Move fast pointer two steps
            fast = fast->next;

            // Check if fast pointer is not NULL, then move it one more step
            if (fast != NULL) {
                fast = fast->next;
            }

            // Check if slow and fast pointers meet (cycle detected)
            if (slow == fast) {
                return slow; // Return the meeting point
            }
        }

        return NULL; // Return NULL if no cycle is detected
    }

    bool hasCycle(ListNode *head) {
        // Use Floyd's cycle detection to get the meeting point
        ListNode *meetingPoint = floyedcycledetection(head);

        // Check if a meeting point is found (cycle detected)
        if (meetingPoint != NULL)
            return true; // Return true if there is a cycle

        return false; // Return false if there is no cycle
    }
};


//The time complexity of Floyd's cycle detection algorithm is O(n), where n is the number of nodes in the linked list.
The algorithm uses two pointers that traverse the list at different speeds, and the fact that they meet (or not) gives information about the presence of a cycle.
