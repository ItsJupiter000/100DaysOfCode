ðŸš€ Day 50 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Delete nodes having greater value on right
ðŸ”— Problem Link: https://lnkd.in/dfcgfedq

class Solution {
public:
    // Function to reverse a linked list
    Node* reverse(Node* head) {
        Node* curr = head;
        Node* prev = NULL;
        Node* next;

        while (curr != NULL) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }

    // Function to compute the modified linked list
    Node* compute(Node* head) {
        // Reverse the original linked list
        head = reverse(head);

        // Initialize pointers for traversal
        Node* curr = head;
        Node* prev = head;

        // Initialize the maximum value found so far
        int max_val = curr->data;

        // Move to the next node
        curr = curr->next;

        // Traverse the reversed linked list
        while (curr != NULL) {
            // If the current node's data is greater than or equal to the max value
            if (curr->data >= max_val) {
                // Update the previous pointer and max value
                prev = curr;
                max_val = curr->data;
                // Move to the next node
                curr = curr->next;
            } else {
                // If the current node's data is less than the max value
                Node* temp = curr;
                // If the current node has a next node, update the previous pointer
                if (curr->next != NULL) {
                    prev->next = curr->next;
                } else {
                    // If the current node is the last node, set the previous node's next to NULL
                    prev->next = NULL;
                }
                // Move to the next node and delete the current node
                curr = curr->next;
                delete temp;
            }
        }

        // Reverse the modified linked list again
        return reverse(head);
    }
};

//Time Complexity: O(n), where n is the number of nodes in the linked list. The time complexity is linear because each node is visited once in the while loops. The reverse operation also has a time complexity of O(n).
