ðŸš€ Day 3 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 88. Merge Sorted Array
ðŸ”— Problem Link: https://lnkd.in/dKJvSKpB

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        // Step 1: Create a new array of size m + n
        int arr[m + n];

        // Step 2: Copy elements from nums1 to the new array
        for (int i = 0; i < m; i++) {
            arr[i] = nums1[i];
        }

        // Step 3: Copy elements from nums2 to the new array, starting at index m
        for (int i = m; i < m + n; i++) {
            arr[i] = nums2[i - m];
        }

        // Step 4: Sort the new array using the standard sort function (e.g., QuickSort)
        sort(arr, arr + m + n);

        // Step 5: Copy sorted elements from the new array back to nums1
        for (int i = 0; i < m + n; i++) {
            nums1[i] = arr[i];
        }
    }
};

Now, considering the most time-consuming step, which is the sorting step, the overall time complexity of this merge function is dominated by the sorting step:
O((m + n) log(m + n))
So, the overall time complexity of this merge operation is O((m + n) log(m + n)).
