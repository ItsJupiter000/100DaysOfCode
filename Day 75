ðŸš€ Day 75 of hashtag#100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 145. Binary Tree Postorder Traversal
ðŸ”— Problem Link: https://lnkd.in/dXhn9KQE


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<int> ans;  // This vector will store the result of the postorder traversal.

    // Function to perform postorder traversal
    vector<int> postorderTraversal(TreeNode* root) {
        if(root == nullptr){
            return ans;  // If the root is null, return an empty vector.
        }      
        postorderTraversal(root -> left);   // Recursively traverse the left subtree.
        postorderTraversal(root -> right);  // Recursively traverse the right subtree.
        ans.push_back(root->val);           // Visit the root and add its value to the result vector.
        return ans;                          // Return the final result vector.
    }
};

Time Complexity: In the worst case, each node is visited once, so the time complexity is O(n), where n is the number of nodes in the binary tree.
