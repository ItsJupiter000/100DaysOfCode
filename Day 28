ðŸš€ Day 28 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 35. Search Insert Position
ðŸ”— Problem Link: https://lnkd.in/dtrKrj25

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        // Get the size of the array
        int n = nums.size();

        // Initialize low, high, and mid for binary search
        int low = 0;
        int high = n - 1;
        int mid = low + (high - low) / 2;

        // Binary search loop
        while (low <= high) {
            // Check if target is equal to the middle element
            if (target == nums[mid]) {
                // If target is found, return the index
                return mid;
            }
            // If target is greater, search in the right half
            else if (target > nums[mid]) {
                low = mid + 1;
            }
            // If target is smaller, search in the left half
            else {
                high = mid - 1;
            }

            // Update mid for the next iteration
            mid = low + (high - low) / 2;
        }

        // If target is not found, return the position where it should be inserted
        return mid;
    }
};

Time Complexity: The time complexity of this algorithm is O(log n) as it performs binary search on a sorted array.
