ðŸš€ Day 18 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Check Armstrong
ðŸ”— Problem Link: https://lnkd.in/dzf7zRAF

#include <cmath>
#include <string>

bool checkArmstrong(int n) {
    // Convert the number to a string to find the length of the number
    string str = to_string(n);
    
    // Initialize variables to store the sum of digits raised to the power of length
    // and the original number (for comparison later)
    int sum = 0, len = str.size();
    int act = n;  

    // Loop through each digit of the number
    while (n > 0) {
        // Extract the last digit of the number
        int digit = n % 10;
        
        // Add the digit raised to the power of length to the sum
        sum = sum + pow(digit, len);
        
        // Remove the last digit from the number
        n = n / 10;
    }

    // Check if the sum of digits raised to the power of length is equal to the original number
    return (sum == act);
}

// Time complexity analysis:
// The while loop iterates through each digit of the number, and the number of digits
// is determined by the length of the string representation of the number (len).
// Therefore, the time complexity is O(len), where len is the number of digits in the input number.
