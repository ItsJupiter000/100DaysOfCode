ðŸš€ Day 100 of #100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 239. Sliding Window Maximum
ðŸ”— Problem Link: https://lnkd.in/dVAUNJXM

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        // Get the size of the input vector
        int n = nums.size();        

        // Create a vector to store the final result
        vector<int> ans;

        // Create a deque to store indices of elements and maintain the maximum in the current window
        deque<int> dq;

        // Iterate through each element in the input vector
        for (int i = 0; i < n ; i++) {
            // Remove elements from the front of the deque that are no longer in the current window
            if (!dq.empty() && (i - dq.front()) >= k) {
                dq.pop_front();
            }

            // Remove elements from the back of the deque that are less than or equal to the current element
            while (!dq.empty() && nums[dq.back()] <= nums[i]){
                dq.pop_back();
            }

            // Add the current element's index to the deque
            dq.push_back(i);

            // If the window size is reached, add the maximum element to the result vector
            if (i >= k-1) {
                ans.push_back(nums[dq.front()]);
            }
        }

        // Return the final result vector
        return ans;
    }
};

Time Complexity: O(n) : 

The algorithm processes each element in the input vector once.
Each element is added to and removed from the deque at most once.
Hence, the overall time complexity is linear in the size of the input vector.
