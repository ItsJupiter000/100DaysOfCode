ðŸš€ Day 72 of hashtag#100DaysOfCode Challenge ðŸš€

ðŸ§© Problem Solved: Leetcode 938. Range Sum of BST
ðŸ”— Problem Link: https://lnkd.in/dNKZ9SUc

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int count = 0;

    // Function to calculate the sum of values in the given range [low, high] in a BST
    int rangeSumBST(TreeNode* root, int low, int high) {    
        // Base case: If the current node is null, return 0
        if(root == nullptr){
            return 0;
        }
        // Check if the value of the current node is within the specified range
        else if(root->val >= low && root->val <= high){
            // If yes, add the value to the running sum (count)
            count += root->val;
        }
        
        // Recursive call to the right subtree with the same range
        rangeSumBST(root->right, low, high);
        
        // Recursive call to the left subtree with the same range
        rangeSumBST(root->left, low, high);
        
        // Return the final sum of values in the specified range
        return count;
    }
};  


Time Complexity: O(N), where N is the number of nodes in the binary tree. Each node is visited once.
